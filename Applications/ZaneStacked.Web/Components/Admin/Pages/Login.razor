@page "/admin/login"
@layout AdminGuestLayout

@using System.ComponentModel.DataAnnotations
@using ZaneStacked.Web.Identity
@using ZaneStacked.Web.Identity.Models

@inject IAccountManagement AccountManagement
@inject NavigationManager Navigation

<PageTitle>Login - ZaneStacked</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="alert alert-success text-center m-4">
            You're logged in as @context.User.Identity?.Name.
        </div>
        <div class="d-flex justify-content-center">
            <button class="btn btn-custom" @onclick="NavigateToAdmin">
                Go to Admin Dashboard
            </button>
        </div>
    </Authorized>
    <NotAuthorized Context="NotAuthorizedContext">
        <div class="d-flex flex-column justify-content-center align-items-center"
             style="min-height: 100vh;">
            <div class="card shadow px-3 w-100" style="max-width: 400px;">
                <div class="card-body my-2">
                    <h2 class="text-center mb-4">Login</h2>

                    @foreach (var error in _formResult.ErrorList)
                    {
                        <div class="alert alert-danger">@error</div>
                    }

                    <EditForm Model="Input" method="post" OnValidSubmit="LoginUserAsync" FormName="Login">
                        <DataAnnotationsValidator/>

                        <div class="form-floating mb-4">
                            <InputText @bind-Value="Input.Email"
                                       id="Input.Email"
                                       class="form-control"
                                       autocomplete="username"
                                       aria-required="true"
                                       placeholder="name@example.com"/>
                            <label for="Input.Email">Email</label>
                            <ValidationMessage For="() => Input.Email" class="text-danger"/>
                        </div>

                        <div class="form-floating mb-4">
                            <InputText type="password"
                                       @bind-Value="Input.Password"
                                       id="Input.Password"
                                       class="form-control"
                                       autocomplete="current-password"
                                       aria-required="true"
                                       placeholder="password"/>
                            <label for="Input.Password">Password</label>
                            <ValidationMessage For="() => Input.Password" class="text-danger"/>
                        </div>

                        <button type="submit" class="w-100 btn btn-custom">
                            Log in
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {

    private FormResult _formResult = new();

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public async Task LoginUserAsync()
    {
        _formResult = await AccountManagement.LoginAsync(Input.Email, Input.Password);

        if (_formResult.Succeeded && !string.IsNullOrEmpty(ReturnUrl))
        {
            Navigation.NavigateTo(ReturnUrl);
        }
    }

    private void NavigateToAdmin()
    {
        Navigation.NavigateTo("/admin");
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = string.Empty;
    }

}