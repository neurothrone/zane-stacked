@page "/admin/projects"
@layout AdminLayout
@attribute [Authorize]

@using System.ComponentModel.DataAnnotations
@using ZaneStacked.Shared.DTOs
@using ZaneStacked.Web.Services

<PageTitle>Projects - ZaneStacked</PageTitle>

<main class="container-fluid">
    <h2 class="mb-3 mt-2">Projects</h2>

    <!-- Add Project Button -->
    <button class="btn btn-custom mb-3"
            disabled="@_isLoading"
            @onclick="ToggleEditForm">
        @(_showForm ? "Cancel" : "Add Project")
    </button>

    <!-- Project Form (Add/Edit) -->
    @if (_showForm)
    {
        <div class="card p-3 mb-3">
            <EditForm Model="_currentProject" OnValidSubmit="SaveProject">
                <DataAnnotationsValidator/>

                <div class="form-floating mb-3">
                    <InputText @bind-Value="_currentProject.Name" class="form-control"/>
                    <label>Project Name</label>
                    <ValidationMessage For="() => _currentProject.Name" class="text-danger"/>
                </div>

                <div class="form-floating mb-3">
                    <InputTextArea @bind-Value="_currentProject.Description" class="form-control"/>
                    <label>Description</label>
                    <ValidationMessage For="() => _currentProject.Description" class="text-danger"/>
                </div>

                <div class="form-floating mb-3">
                    <InputText @bind-Value="_currentProject.GitHubUrl" class="form-control"/>
                    <label>GitHub Url</label>
                    <ValidationMessage For="() => _currentProject.GitHubUrl" class="text-danger"/>
                </div>

                <div class="form-floating mb-3">
                    <InputText @bind-Value="_currentProject.DemoUrl" class="form-control"/>
                    <label>Demo Url</label>
                    <ValidationMessage For="() => _currentProject.DemoUrl" class="text-danger"/>
                </div>

                <div class="form-floating mb-3">
                    <InputText @bind-Value="_currentProject.FeaturedImage" class="form-control"/>
                    <label>Featured Image</label>
                    <ValidationMessage For="() => _currentProject.FeaturedImage" class="text-danger"/>
                </div>

                <SkillSelect CssClass="mb-3"
                             SelectedSkillIds="@_selectedSkills"
                             SelectedSkillIdsChanged="@(skillIds => _selectedSkills = skillIds)"
                             Skills="@_skills"
                             IsLoading="@_isLoadingSkills"
                             IsDisabled="_isLoading"/>

                <LoadingButton
                    ButtonClass="btn-custom w-100"
                    Type="submit"
                    Text="@(_isEditing && _selectedProject is not null ? "Update" : "Add")"
                    IsLoading="@(_isLoading && !_isDeleting)"
                    Disabled="@IsButtonDisabled"/>
            </EditForm>
        </div>
    }

    <!-- Search Input -->
    @* <input type="text" *@
    @*        class="form-control mb-3" *@
    @*        placeholder="Search projects..." *@
    @*        @bind="_searchTerm"/> *@

    @if (_allProjects is null)
    {
        <p>Loading...</p>
    }
    else if (_allProjects.Count == 0)
    {
        <p>No projects found.</p>
    }
    else
    {
        <!-- Project List -->
        <div class="list-group">
            <Virtualize Items="_allProjects" ItemSize="60" Context="project">
                <button @key="project.Id"
                        class="list-group-item list-group-item-action @(_selectedProject?.Id == project.Id ? "active" : "")"
                        @onclick="() => SelectProject(project)">
                    <div class="d-flex flex-column">
                        <div class="fw-bold"><span>@project.Name</span></div>

                        <div class="d-flex justify-content-between align-items-center mt-2">
                            <div class="d-flex align-items-center gap-3">
                                @if (!string.IsNullOrEmpty(project.GitHubUrl))
                                {
                                    <span title="GitHub">
                                        <i class="bi bi-github project-icon"></i>
                                    </span>
                                }
                                @if (!string.IsNullOrEmpty(project.DemoUrl))
                                {
                                    <span title="Live Demo">
                                        <i class="bi bi-play-circle project-icon"></i>
                                    </span>
                                }
                                @if (!string.IsNullOrEmpty(project.FeaturedImage))
                                {
                                    <i class="bi bi-image project-icon" title="Has Featured Image"></i>
                                }
                            </div>

                            @if (project.Skills.Count > 0)
                            {
                                <span class="project-badge">
                                    <i class="bi bi-lightbulb"></i> @(project.Skills.Count > 9 ? "9+" : project.Skills.Count.ToString())
                                </span>
                            }
                        </div>

                        <small class="text-muted project-description">@project.Description</small>
                    </div>
                </button>
            </Virtualize>
        </div>
    }
</main>

<!-- Action Panel -->
@if (_selectedProject is not null)
{
    <ActionPanel
        IsLoading="_isLoading"
        IsDeleting="_isDeleting"
        OnEdit="EditProject"
        OnDelete="DeleteProject"/>
}

@code {

    [Inject]
    private ProjectService ProjectService { get; set; } = null!;

    [Inject]
    private SkillService SkillService { get; set; } = null!;

    private List<ProjectDto>? _allProjects;
    private InputProject _currentProject = new();
    private ProjectDto? _selectedProject;

    private List<SkillDto> _skills = [];
    private List<int> _selectedSkills = [];

    // private string _searchTerm = "";

    private bool _isEditing;
    private bool _showForm;

    private bool _isLoading;
    private bool _isLoadingSkills;
    private bool _isDeleting;

    private bool IsButtonDisabled => _isLoading || _isDeleting;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        _isLoadingSkills = true;

        _allProjects = await ProjectService.GetProjectsAsync();
        _skills = await SkillService.GetSkillsAsync();

        _isLoading = false;
        _isLoadingSkills = false;
    }

    private void ToggleEditForm()
    {
        _showForm = !_showForm;
        if (!_showForm)
            return;

        _isEditing = false;
        _currentProject = new InputProject();
    }

    private async Task SaveProject()
    {
        _isLoading = true;

        if (_currentProject.Id == 0)
        {
            var createdProject = await ProjectService.AddProjectAsync(
                new InputProjectDto
                {
                    Name = _currentProject.Name,
                    Description = _currentProject.Description,
                    GitHubUrl = _currentProject.GitHubUrl,
                    DemoUrl = _currentProject.DemoUrl,
                    FeaturedImage = _currentProject.FeaturedImage,
                    SkillIds = _selectedSkills
                }
            );
            if (createdProject is not null)
                _allProjects?.Insert(0, createdProject);
        }
        else
        {
            var updatedProject = await ProjectService.UpdateProjectAsync(
                _currentProject.Id,
                new InputProjectDto
                {
                    Name = _currentProject.Name,
                    Description = _currentProject.Description,
                    GitHubUrl = _currentProject.GitHubUrl,
                    DemoUrl = _currentProject.DemoUrl,
                    FeaturedImage = _currentProject.FeaturedImage,
                    SkillIds = _selectedSkills,
                    CreatedDate = _currentProject.CreatedDate
                }
            );

            if (updatedProject is not null)
            {
                var index = _allProjects?.FindIndex(s => s.Id == updatedProject.Id);
                if (index is not null && index != -1 && _allProjects is not null)
                {
                    _allProjects[index.Value] = updatedProject;
                }
            }

            _isEditing = false;
            _selectedProject = null;
            _showForm = false;
        }

        _currentProject = new InputProject();
        _isLoading = false;
    }

    private void SelectProject(ProjectDto project)
    {
        _selectedProject = _selectedProject?.Id == project.Id ? null : project;
        if (_selectedProject is null)
            ResetCurrentProject();
    }

    private void EditProject()
    {
        if (_selectedProject is null)
            return;

        _isEditing = true;
        _showForm = true;

        _currentProject = new InputProject
        {
            Id = _selectedProject.Id,
            Name = _selectedProject.Name,
            Description = _selectedProject.Description,
            GitHubUrl = _selectedProject.GitHubUrl,
            DemoUrl = _selectedProject.DemoUrl,
            FeaturedImage = _selectedProject.FeaturedImage,
            CreatedDate = _selectedProject.CreatedDate
        };

        _selectedSkills = _selectedProject.Skills.Select(s => s.Id).ToList();
    }

    private async Task DeleteProject()
    {
        if (_selectedProject is null)
            return;

        _isLoading = true;
        _isDeleting = true;

        var deleted = await ProjectService.DeleteProjectAsync(_selectedProject.Id);
        if (deleted)
        {
            _allProjects?.Remove(_selectedProject);
        }

        _selectedProject = null;
        _isLoading = false;
        _isDeleting = false;

        ResetCurrentProject();
    }

    private void ResetCurrentProject()
    {
        _currentProject.Id = 0;
        _isEditing = false;
    }

    private class InputProject
    {
        public int Id { get; set; }

        [Required]
        [MinLength(1)]
        public string Name { get; set; } = string.Empty;

        [Required]
        [MinLength(1)]
        public string Description { get; set; } = string.Empty;

        [Required]
        [MinLength(1)]
        public string GitHubUrl { get; set; } = string.Empty;

        public string? DemoUrl { get; set; }

        [Required]
        [MinLength(1)]
        public string FeaturedImage { get; set; } = string.Empty;

        public DateTime CreatedDate { get; set; } = DateTime.UtcNow;
    }

}